AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Security Hub Recurring Summary. Sends email notifications with a summary of
  the security findings.  This template creates Security Hub Custom Insights,
  Lambda function for delivery, SNS Topic, and needed IAM roles.
Parameters:
  RecurringScheduleCron:
    Type: String
  AdditionalEmailFooterText:
    Description: Additional text to append at the end of email message.
    Type: String
  SecurityHubRecurringSummarySNSTopic:
    Description: SNS topic
    Type: String
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Parameters
        Parameters:
          - RecurringScheduleCron
          - AdditionalEmailFooterText
    ParameterLabels:
      RecurringScheduleCron:
        default: 'CloudWatch Cron Expression:'
      AdditionalEmailFooterText:
        default: 'Additional Footer text:'
Resources:
  SecurityHubSummaryEmailSchedule:
    Properties:
      Name: SecurityHubSummaryEmailSchedule
      Description: Triggers the Recurring Security Hub summary email
      ScheduleExpression: !Ref RecurringScheduleCron
      Targets:
        - Arn: !GetAtt
            - SendSecurityHubSummaryEmailLambda
            - Arn
          Id: '1'
    Type: 'AWS::Events::Rule'
  CloudWatchSchedulePermission:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt
        - SendSecurityHubSummaryEmailLambda
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - SecurityHubSummaryEmailSchedule
        - Arn
    Type: 'AWS::Lambda::Permission'
  CustomInsightsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CreateSecurityHubInsights
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'securityhub:CreateInsight'
                Resource: '*'
  SendEmailLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSSecurityHubReadOnlyAccess'
      Policies:
        - PolicyName: SecurityHubSendEmailToSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref SecurityHubRecurringSummarySNSTopic
  CustomInsightsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: A Lambda function is used by the CloudFormation template to create the custom SecHub Insights (Security Hub summary email).
      Code:
        ZipFile: !Join
          - |+

          - - var response = require('cfn-response');
            - 'exports.handler = function(event, context) {'
            - '    if (event.RequestType == ''Delete'') {'
            - '        response.send(event, context, response.SUCCESS);'
            - '        return;'
            - '   }'
            - '   var AWS = require(''aws-sdk'');'
            - '   var responseData = {};'
            - '   var index = event.ResourceProperties.insightID'
            - '   const securityhub = new AWS.SecurityHub();'
            - '   var params = [];'
            - '   params[''0''] = {Name: ''Summary Email - 01 - AWS Foundational Security Best practices findings by compliance status'','
            - '   GroupByAttribute: ''ComplianceStatus'', '
            - '   Filters: {Type:[{Value:''Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices'', Comparison:''EQUALS''}]'
            - '     ,WorkflowStatus:[{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};   '
            - '   params[''1''] = {Name: ''Summary Email - 02 - Failed AWS Foundational Security Best practices findings by severity'','
            - '   GroupByAttribute: ''SeverityLabel'', '
            - '   Filters: {Type:[{Value:''Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices'', Comparison:''EQUALS''}]'
            - '     ,WorkflowStatus:[{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], ComplianceStatus: [{Value:''FAILED'',Comparison:''EQUALS''}],RecordState: [{Value:''ACTIVE'',Comparison:''EQUALS''}] }};   '
            - '   params[''2''] = {Name: ''Summary Email - 03 - Count of Amazon GuardDuty findings by severity'','
            - '   GroupByAttribute: ''SeverityLabel'', '
            - '   Filters: {ProductName:[{Value:''GuardDuty'', Comparison:''EQUALS''}]'
            - '         ,WorkflowStatus:[{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};'
            - '   params[''3''] = {Name: ''Summary Email - 04 - Count of IAM Access Analyzer findings by severity'','
            - '   GroupByAttribute: ''SeverityLabel'', '
            - '   Filters: {ProductName:[{Value:''IAM Access Analyzer'', Comparison:''EQUALS''}]'
            - '         ,WorkflowStatus:[{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};'
            - '   params[''4''] = {Name: ''Summary Email - 05 - Count of all unresolved findings by severity'','
            - '   GroupByAttribute: ''SeverityLabel'', '
            - '   Filters: {WorkflowStatus:[{Value:''RESOLVED'', Comparison:''NOT_EQUALS''},{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}]'
            - '         , RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};'
            - '   params[''5''] = {Name: ''Summary Email - 06 - new findings in the last 7 days'','
            - '   GroupByAttribute: ''ProductName'', '
            - '   Filters: {WorkflowStatus:[{Value:''RESOLVED'', Comparison:''NOT_EQUALS''}, {Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], CreatedAt:[{DateRange:{Value:''7'', Unit:''DAYS''}}]'
            - '         , RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};  '
            - '   params[''6''] = {Name: ''Summary Email - 07 - Top Resource Types with findings by count'','
            - '   GroupByAttribute: ''ResourceType'', '
            - '   Filters: {WorkflowStatus:[{Value:''SUPPRESSED'',Comparison:''NOT_EQUALS''}], RecordState:[{Value:''ACTIVE'',Comparison:''EQUALS''}] }};  '
            - '    securityhub.createInsight(params[index], function(err, createInsightResult) {'
            - '    if (err) {'
            - '        responseData = {Error: ''CreateInsight call failed''};'
            - '        console.log(responseData.Error , err);'
            - '        response.send(event, context, response.FAILED, responseData);'
            - '    }'
            - '    else {'
            - '        console.log(createInsightResult[''InsightArn'']);'
            - '        responseData[''ARN''] = createInsightResult[''InsightArn''];'
            - '        response.send(event, context, response.SUCCESS, responseData);'
            - '    }'
            - '});'
            - '}'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: '30'
      Role: !GetAtt
        - CustomInsightsLambdaExecutionRole
        - Arn
  SendSecurityHubSummaryEmailLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SendSecurityHubSummaryEmail
      Description: A Lambda function queries the custom insights from the Security Hub API and uses the data to create the summary email message. The function then sends the email message to the SNS topic.
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          SINGLE_LINE_LENGTH = 80
          DOUBLE_LINE_LENGTH = 47
          FOOTER_TEXT = os.environ['AdditionalEmailFooterText']
          HEADER_TEXT = 'Weekly Security Hub Report \n'
          FOOTER_URL = 'https://console.aws.amazon.com/securityhub/home/standards#/standards'

          # this function will add a horizontal line to the email
          def add_horizontal_line(text_body, line_char, line_length):
              y = 0
              while y <= line_length:
                  text_body += line_char
                  y += 1
              text_body += '\n'

              return text_body

          def lambda_handler(event, context):

              insightArns = []
              insightLabels = []
              #this is the placement number of insights that are grouped by severity, this is used for reversing the sort
              severityTypeInsights = [1,2,3,4]

              #fetch arns for custom insights from lambda environment variables
              insightArns.append(os.environ['ARNInsight01'])
              insightArns.append(os.environ['ARNInsight02'])
              insightArns.append(os.environ['ARNInsight03'])
              insightArns.append(os.environ['ARNInsight04'])
              insightArns.append(os.environ['ARNInsight05'])
              insightArns.append(os.environ['ARNInsight06'])
              insightArns.append(os.environ['ARNInsight07'])

              #fetch the SNS arn to send the email body to, from lambda environment variables
              snsTopicArn = os.environ['SNSTopic']

              #determine region from the arns
              arnParsed = insightArns[0].split(':')
              region = arnParsed[3]

              #create list of section labels
              insightLabels.append('AWS Foundational Security Best Practices security checks:')
              insightLabels.append('AWS Foundational Security Best Practices failed security checks by severity:')
              insightLabels.append('GuardDuty threat detection findings by severity:')
              insightLabels.append('IAM Access Analyzer findings by severity:')
              insightLabels.append('Unresolved findings by severity:')
              insightLabels.append('New findings in the last 7 days:')
              insightLabels.append('Top 10 Resource Types with findings:')

              #format Email header
              snsBody = ''
              snsBody = add_horizontal_line(snsBody, '=', DOUBLE_LINE_LENGTH)
              snsBody += HEADER_TEXT
              snsBody = add_horizontal_line(snsBody, '=', DOUBLE_LINE_LENGTH)
              snsBody += '\n\n'

              #create boto3 client for Security Hub API calls
              sec_hub_client = boto3.client('securityhub')

              #for each custom insight get results and format for email
              i = 0
              while i < len(insightArns):

                  #call security hub api to get results for each custom insight
                  response = sec_hub_client.get_insight_results(
                      InsightArn=insightArns[i]
                  )
                  insightResults = response['InsightResults']['ResultValues']

                  #format into an email - section header
                  snsBody += str(insightLabels[i]) + '\n'
                  snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)

                  #check for blank custom insights
                  if len(insightResults) == 0:
                      snsBody += 'NO RESULTS \n'

                  #determine how many rows are in this section, cap at 10
                  totalRows = len(insightResults)
                  if totalRows > 10:
                      totalRows = 10

                  #determine if this is the first section to customize the label
                  if i == 0:
                      firstSection = True
                  else:
                      firstSection = False

                  #determine if this is an insight that needs an updated sort
                  if (i in severityTypeInsights):
                      #reverse the sort
                      insightResults.reverse()

                  #convert the API results into rows for email formatting
                  x = 0
                  while x < totalRows:

                      snsBody  +=  str(insightResults[x]['Count']) #add the value
                      snsBody += '\t - \t'    #add a divider
                      if firstSection: #add two extra labels (TOTAL and CHECKS) to the values for the foundational summary
                          snsBody += 'TOTAL '
                          snsBody += str(insightResults[x]['GroupByAttributeValue']) #add the label
                          snsBody += ' CHECKS'
                      else:
                          snsBody += str(insightResults[x]['GroupByAttributeValue']) #add the label

                      snsBody += '\n' #next line
                      x += 1

                  #add table footer
                  snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)
                  snsBody +=' \n'

                  #create and add deep link for this section
                  insightLink = 'https://' + region + '.console.aws.amazon.com/securityhub/home?region='
                  insightLink += region + '#/insights/' + insightArns[i]
                  snsBody += insightLink

                  snsBody += ' \n\n'
                  i += 1

              #add footer text
              snsBody += FOOTER_TEXT
              snsBody += '\n'
              snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)
              snsBody += FOOTER_URL

              #send to SNS
              sns_client = boto3.client('sns')

              response = sns_client.publish(
                  TopicArn=snsTopicArn,
                  Message=snsBody
              )

              return {
                  'statusCode': 200,
              }

      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: '30'
      Environment:
        Variables:
          ARNInsight01: !GetAtt
            - CreateInsights0
            - ARN
          ARNInsight02: !GetAtt
            - CreateInsights1
            - ARN
          ARNInsight03: !GetAtt
            - CreateInsights2
            - ARN
          ARNInsight04: !GetAtt
            - CreateInsights3
            - ARN
          ARNInsight05: !GetAtt
            - CreateInsights4
            - ARN
          ARNInsight06: !GetAtt
            - CreateInsights5
            - ARN
          ARNInsight07: !GetAtt
            - CreateInsights6
            - ARN
          SNSTopic: !Ref SecurityHubRecurringSummarySNSTopic
          AdditionalEmailFooterText: !Ref AdditionalEmailFooterText
      Role: !GetAtt
        - SendEmailLambdaExecutionRole
        - Arn
  CreateInsights0:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '0'
  CreateInsights1:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '1'
  CreateInsights2:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '2'
  CreateInsights3:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '3'
  CreateInsights4:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '4'
  CreateInsights5:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '5'
  CreateInsights6:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt
        - CustomInsightsFunction
        - Arn
      insightID: '6'
